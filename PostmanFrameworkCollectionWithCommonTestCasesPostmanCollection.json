{
	"info": {
		"_postman_id": "08a5ddcc-7339-4f65-a92b-72f6d7a57856",
		"name": "PostmanFrameworkCollectionWithCommonTestCases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19853837"
	},
	"item": [
		{
			"name": "RequestToBeParameterized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Extracting the Header keys and values and storing in seperate arrays\r",
							"if (pm.iterationData.get(\"Headers\")) {\r",
							"    var inputHeaderString = pm.iterationData.get(\"Headers\")\r",
							"\r",
							"    var headerKeys = new Array();\r",
							"    var headerValues = new Array();\r",
							"    var temp;\r",
							"    var stringToBeParsed = inputHeaderString.split(\",\");\r",
							"    for (var splitString in stringToBeParsed) {\r",
							"        temp = stringToBeParsed[splitString].split(\":\");\r",
							"        headerKeys.push(temp[0]);\r",
							"        headerValues.push(temp[1]);\r",
							"    }\r",
							"\r",
							"    // trimming the values stored  \r",
							"    for (var i = 0; i < headerKeys.length; ++i)\r",
							"        headerKeys[i] = headerKeys[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")\r",
							"\r",
							"    console.log(headerKeys);\r",
							"    console.log(headerValues);\r",
							"    noOfValues = headerValues.length\r",
							"    console.log(\"No. of values stored in headers is \" + noOfValues)\r",
							"\r",
							"\r",
							"    for (i = 0; i <= noOfValues - 1; i++) {\r",
							"        // parsedResponseBody = pm.response.json\r",
							"\r",
							"        pm.request.headers.add({\r",
							"            key: headerKeys[i],\r",
							"            value: headerValues[i]\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "{{APIMETHOD}}",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{Request Payload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}",
					"host": [
						"{{Url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Setting the request method type from the csv file",
					"pm.globals.set(\"APIMETHOD\", pm.iterationData.get(\"API Call Type\"));",
					"",
					"",
					"//Extracting and storing the Query parameter keys and values in seperate arrays",
					"if (pm.iterationData.get(\"Query Parameters\")) {",
					"    //Fetching the query keys and values and setting the query parameters",
					"    var extractedQueryParameters = pm.iterationData.get(\"Query Parameters\")",
					"    var queryKeys = new Array();",
					"    var queryValues = new Array();",
					"    var tempVarToPushKeysAndValuesToArray;",
					"    stringToBeParsed = extractedQueryParameters.split(\",\");",
					"    for (var splitString in stringToBeParsed) {",
					"        tempVarToPushKeysAndValuesToArray = stringToBeParsed[splitString].split(\":\");",
					"        queryKeys.push(tempVarToPushKeysAndValuesToArray[0]);",
					"        queryValues.push(tempVarToPushKeysAndValuesToArray[1]);",
					"    }",
					"",
					"    // trimming the values stored | Removing spaces and next lines  ",
					"    for (var i = 0; i < queryKeys.length; ++i)",
					"        queryKeys[i] = queryKeys[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")",
					"    console.log(queryKeys);",
					"    console.log(queryValues);",
					"    noOfValues = queryValues.length",
					"    console.log(\"No. of values stored in headers is \" + noOfValues)",
					"",
					"    //Passing the query keys and value in the url ",
					"    for (i = 0; i <= noOfValues - 1; i++) {",
					"",
					"        pm.request.url.query.add({ key: queryKeys[i], value: queryValues[i] });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Reading and storing the expected status code(s) from the CSV",
					"csvStatusCode = pm.iterationData.get(\"Expected Status Code\")",
					"extractStatusCodeFromCsv = csvStatusCode;",
					"pm.environment.set(\"statusCodeSetCsv\", extractStatusCodeFromCsv)",
					"",
					"",
					"//Reading the expected response time and request method type for a request from the CSV",
					"csvResponseTime = pm.iterationData.get(\"Expected Response Time\")",
					"pm.environment.set(\"idealResponseTime\", csvResponseTime)",
					"pm.environment.set(\"requestMethod\", pm.iterationData.get(\"API Call Type\"))",
					"console.log(\"The expected request method is \" + pm.environment.get(\"requestMethod\"))",
					"console.log(\"The request method of the API run is \" + pm.request.method)",
					"",
					"",
					"// //Extracting the Test Scenario ID, Test scenario description, Test case ID, and Test case description from the csv to append with the test script description in the test runner",
					"testCaseID = pm.iterationData.get(\"Test Case ID\")",
					"testScenarioID = pm.iterationData.get(\"Test Scenario ID\")",
					"testCaseDescription = pm.iterationData.get(\"Test Case Description\")",
					"testScenarioDescription = pm.iterationData.get(\"Test Scenario Description\")",
					"",
					"// testDescription = testCaseID.concat(\" - \", testScenarioDescription)",
					"",
					"//Storing all the keys and corresponding value from the response body",
					"if (pm.iterationData.get(\"Values to be stored and chained\") && (pm.response.code == 200 || pm.response.code == 201)) {",
					"",
					"    console.log(\"Entering the values stored loop\")",
					"    var DataToBeStoredKeys = new Array();",
					"    var DataToBeStoredValues = new Array();",
					"    var extractedKeysAndValuesTobeStored = pm.iterationData.get(\"Values to be stored and chained\");",
					"    var temp;",
					"    var stringToBeParsed = extractedKeysAndValuesTobeStored.split(\",\");",
					"    for (var splitString in stringToBeParsed) {",
					"        temp = stringToBeParsed[splitString].split(\":\");",
					"        DataToBeStoredKeys.push(temp[0]);",
					"        DataToBeStoredValues.push(temp[1]);",
					"    }",
					"",
					"    // trimming the values stored  ",
					"    for (var i = 0; i < DataToBeStoredKeys.length; ++i) {",
					"        DataToBeStoredKeys[i] = DataToBeStoredKeys[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")",
					"",
					"        console.log(DataToBeStoredKeys);",
					"        noOfValues = DataToBeStoredKeys.length",
					"        console.log(\"No. of values stored is \" + noOfValues)",
					"",
					"        //------------------------------------------------------------------------- ",
					"        var individualJsonKeyLocator = new Array();",
					"        parsedResponseBodyData = pm.response.json()",
					"        // customLocatorAppend = pm.iterationData.get(\"Variable Locator\")",
					"",
					"        // var individualJsonKeyLocator = customLocatorAppend.split(\",\");",
					"        // console.log(\"The json paths are \" + individualJsonKeyLocator);",
					"        // console.log(individualJsonKeyLocator);",
					"",
					"        // individualJsonKeyLocator[i] = individualJsonKeyLocator[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")",
					"        // console.log(individualJsonKeyLocator);",
					"        // console.log(\"The \" + i + \"iteration path is \" + individualJsonKeyLocator[i])",
					"",
					"",
					"        if (pm.iterationData.get(\"Variable Locator\")) {",
					"            customLocatorAppend = pm.iterationData.get(\"Variable Locator\")",
					"            // var jsonPathLocatorStored = new Array();",
					"",
					"            var individualJsonKeyLocator = customLocatorAppend.split(\",\");",
					"            console.log(\"The json paths are \" + individualJsonKeyLocator);",
					"            console.log(individualJsonKeyLocator);",
					"",
					"            individualJsonKeyLocator[i] = individualJsonKeyLocator[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")",
					"            console.log(individualJsonKeyLocator);",
					"            console.log(\"The \" + i + \"iteration path is \" + individualJsonKeyLocator[i])",
					"",
					"            console.log(\"the value to be appened is \" + individualJsonKeyLocator[i])",
					"            var responseLocator = eval(\"parsedResponseBodyData.\" + individualJsonKeyLocator[i]);",
					"            console.log(\"The json path for this iteration is \" + responseLocator)",
					"        }",
					"",
					"        else {",
					"            responseLocator = pm.response.json()",
					"        }",
					"",
					"        const values = Object.entries(responseLocator)",
					"            .filter(([a]) => a.startsWith(DataToBeStoredKeys[i]))",
					"            .map(([, b]) => b);",
					"        console.log(\"The values stored in the key is\" + DataToBeStoredKeys[i])",
					"        console.log(values);",
					"        pm.variables.set(\"valueFetched_\" + (i + 1) + \"_\" + pm.iterationData.get(\"Test Scenario ID\") + \"_\" + pm.iterationData.get(\"Test Case ID\"), values[0]);",
					"        console.log(pm.variables.get(\"valueFetched_\" + (i + 1) + \"_\" + pm.iterationData.get(\"Test Scenario ID\") + \"_\" + pm.iterationData.get(\"Test Case ID\")));",
					"        console.log(\"Exiting to store the values and keys seperately\")",
					"        console.log(\"Exiting the values stored loop\")",
					"    }",
					"    console.log(\"Exiting the values stored loop\")",
					"}",
					"",
					"//Extracting the expected result and storing the keys and values seperately",
					"if (pm.iterationData.get(\"Expected Response Data\")) {",
					"    var extractedResponseData = pm.iterationData.get(\"Expected Response Data\")",
					"",
					"    var keys = new Array();",
					"    var values = new Array();",
					"",
					"    var temp;",
					"    var stringToBeParsed = extractedResponseData.split(\",\");",
					"    for (var splitString in stringToBeParsed) {",
					"        temp = stringToBeParsed[splitString].split(\":\");",
					"        keys.push(temp[0]);",
					"        values.push(temp[1]);",
					"    }",
					"",
					"    // trimming the values stored  ",
					"    for (var i = 0; i < keys.length; ++i)",
					"        keys[i] = keys[i].replace(/(\\r\\n|\\n|\\r)/gm, \"\")",
					"",
					"    console.log(keys);",
					"    console.log(values);",
					"    noOfValues = values.length",
					"    console.log(\"No. of values stored is \" + noOfValues)",
					"}",
					"",
					"//Test cases to validate the Reponse code, response time, and response body based on the type of request ",
					"if (pm.environment.get(\"statusCodeSetCsv\") == (pm.response.code)) {",
					"",
					"    requestMethodType = pm.request.method",
					"    switch (requestMethodType) {",
					"        case \"GET\":",
					"",
					"            //Validate if the request method is GET",
					"            if (pm.iterationData.get(\"API Call Type\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate if the request method is GET - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.request.method).to.eql(\"GET\")",
					"                })",
					"            }",
					"",
					"            //Validate if the response code of the request matches with the expected status code ",
					"            if (pm.iterationData.get(\"Expected Status Code\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate the response code of the request - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect((pm.response.code)).to.eql(pm.environment.get(\"statusCodeSetCsv\"))",
					"                    // pm.expect(pm.response.code).to.be.oneOf(pm.environment.get(\"statusCodeSetCsv\"))",
					"                })",
					"            }",
					"",
					"            //Validate the response time for a request meets the expected response time",
					"            if (pm.iterationData.get(\"Expected Response Time\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the reponse time to be less than - \" + pm.environment.get(\"idealResponseTime\") + \" ms - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.response.responseTime).to.be.below(pm.environment.get(\"idealResponseTime\"))",
					"                })",
					"            }",
					"",
					"            // Validate the response body with the expected result",
					"            if (pm.iterationData.get(\"Expected Response Data\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the response body - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    for (i = 0; i <= noOfValues - 1; i++) {",
					"                        parsedResponseBody = pm.response.json",
					"                        expectedKey = keys[i]",
					"                        pm.variables.set(\"expectedValue\", values[i])",
					"                        console.log(\"The expected value from the loop is \" + pm.variables.get(\"expectedValue\"))",
					"",
					"                        pm.expect(pm.response.text()).to.include(pm.variables.get(\"expectedValue\"))",
					"                    }",
					"                })",
					"            }",
					"            break;",
					"",
					"        case \"POST\":",
					"",
					"            //Validate if the request method is POST",
					"            if (pm.iterationData.get(\"API Call Type\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate if the request method is POST - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.request.method).to.eql(\"POST\")",
					"                })",
					"            }",
					"",
					"            //Validate if the response code of the request matches with the expected status code ",
					"            if (pm.iterationData.get(\"Expected Status Code\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate the response code of the request - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect((pm.response.code)).to.eql(pm.environment.get(\"statusCodeSetCsv\"))",
					"                    // pm.expect((pm.response.code)).to.be.oneOf(pm.environment.get(\"statusCodeSetCsv\"))",
					"                })",
					"            }",
					"",
					"            //Validate the response time for a request meets the expected response time",
					"            if (pm.iterationData.get(\"Expected Response Time\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the reponse time to be less than \" + pm.environment.get(\"idealResponseTime\") + \" ms - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.response.responseTime).to.be.below(pm.environment.get(\"idealResponseTime\"))",
					"                })",
					"            }",
					"",
					"            // Validate the response body with the expected result",
					"            if (pm.iterationData.get(\"Expected Response Data\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the response body - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    for (i = 0; i <= noOfValues - 1; i++) {",
					"                        parsedResponseBody = pm.response.json",
					"                        expectedKey = keys[i]",
					"                        pm.variables.set(\"expectedValue\", values[i])",
					"                        console.log(\"The expected value from the loop is \" + pm.variables.get(\"expectedValue\"))",
					"",
					"                        pm.expect(pm.response.text()).to.include(pm.variables.get(\"expectedValue\"))",
					"                    }",
					"                })",
					"            }",
					"            break;",
					"",
					"        case \"PUT\":",
					"            //Validate if the request method is PUT",
					"            if (pm.iterationData.get(\"API Call Type\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate if the request method is PUT - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.request.method).to.eql(\"PUT\")",
					"                })",
					"            }",
					"",
					"            //Validate if the response code of the request matches with the expected status code ",
					"            if (pm.iterationData.get(\"Expected Status Code\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate the response code of the request - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect((pm.response.code)).to.eql(pm.environment.get(\"statusCodeSetCsv\"))",
					"                    // pm.expect((pm.response.code)).to.be.oneOf(pm.environment.get(\"statusCodeSetCsv\"))",
					"                })",
					"            }",
					"",
					"            //Validate the response time for a request meets the expected response time",
					"            if (pm.iterationData.get(\"Expected Response Time\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the reponse time to be less than \" + pm.environment.get(\"idealResponseTime\") + \" ms - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.response.responseTime).to.be.below(pm.environment.get(\"idealResponseTime\"))",
					"                })",
					"            }",
					"",
					"            // Validate the response body with the expected result",
					"            if (pm.iterationData.get(\"Expected Response Data\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the response body - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    for (i = 0; i <= noOfValues - 1; i++) {",
					"                        parsedResponseBody = pm.response.json",
					"                        expectedKey = keys[i]",
					"                        pm.variables.set(\"expectedValue\", values[i])",
					"                        console.log(\"The expected value from the loop is \" + pm.variables.get(\"expectedValue\"))",
					"",
					"                        pm.expect(pm.response.text()).to.include(pm.variables.get(\"expectedValue\"))",
					"                    }",
					"                })",
					"            }",
					"            break;",
					"        case \"PATCH\":",
					"            //Validate if the request method is PATCH",
					"            if (pm.iterationData.get(\"API Call Type\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate if the request method is PATCH - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.request.method).to.eql(\"PATCH\")",
					"                })",
					"            }",
					"",
					"            //Validate if the response code of the request matches with the expected status code ",
					"            if (pm.iterationData.get(\"Expected Status Code\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate the response code of the request - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect((pm.response.code)).to.eql(pm.environment.get(\"statusCodeSetCsv\"))",
					"                    // pm.expect((pm.response.code)).to.be.oneOf(pm.environment.get(\"statusCodeSetCsv\"))",
					"                })",
					"            }",
					"",
					"            //Validate the response time for a request meets the expected response time",
					"            if (pm.iterationData.get(\"Expected Response Time\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the reponse time to be less than \" + pm.environment.get(\"idealResponseTime\") + \" ms - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.response.responseTime).to.be.below(pm.environment.get(\"idealResponseTime\"))",
					"                })",
					"            }",
					"",
					"            // Validate the response body with the expected result",
					"            if (pm.iterationData.get(\"Expected Response Data\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the response body - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    for (i = 0; i <= noOfValues - 1; i++) {",
					"                        parsedResponseBody = pm.response.json",
					"                        expectedKey = keys[i]",
					"                        pm.variables.set(\"expectedValue\", values[i])",
					"                        console.log(\"The expected value from the loop is \" + pm.variables.get(\"expectedValue\"))",
					"",
					"                        pm.expect(pm.response.text()).to.include(pm.variables.get(\"expectedValue\"))",
					"                    }",
					"                })",
					"            }",
					"            break;",
					"        case \"DELETE\":",
					"            //Validate if the request method is DELETE",
					"            if (pm.iterationData.get(\"API Call Type\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate if the request method is DELETE - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.request.method).to.eql(\"DELETE\")",
					"                })",
					"            }",
					"",
					"            //Validate if the response code of the request matches with the expected status code ",
					"            if (pm.iterationData.get(\"Expected Status Code\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validate the response code of the request - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect((pm.response.code)).to.eql(pm.environment.get(\"statusCodeSetCsv\"))",
					"                    // pm.expect((pm.response.code)).to.be.oneOf(pm.environment.get(\"statusCodeSetCsv\"))",
					"                })",
					"            }",
					"",
					"            //Validate the response time for a request meets the expected response time",
					"            if (pm.iterationData.get(\"Expected Response Time\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the reponse time to be less than \" + pm.environment.get(\"idealResponseTime\") + \" ms - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    pm.expect(pm.response.responseTime).to.be.below(pm.environment.get(\"idealResponseTime\"))",
					"                })",
					"            }",
					"",
					"            // Validate the response body with the expected result",
					"            if (pm.iterationData.get(\"Expected Response Data\")) {",
					"                pm.test(testScenarioID + \" | \" + testCaseID + \" - Validating the response body - \" + testScenarioDescription + \" | \" + testCaseDescription, function () {",
					"                    for (i = 0; i <= noOfValues - 1; i++) {",
					"                        parsedResponseBody = pm.response.json",
					"                        expectedKey = keys[i]",
					"                        pm.variables.set(\"expectedValue\", values[i])",
					"                        console.log(\"The expected value from the loop is \" + pm.variables.get(\"expectedValue\"))",
					"",
					"                        pm.expect(pm.response.text()).to.include(pm.variables.get(\"expectedValue\"))",
					"                    }",
					"                })",
					"            }",
					"            break;",
					"        default:",
					"            pm.test(\"FAIL - The request API call type does not match with the expected method type\", () => { throw new Error(\"- Please look into the value given under API Call Type column in the CSV\") })",
					"            console.log(\"The request API call type does not match with the expected method type\")",
					"            break;",
					"    }",
					"}",
					"",
					"else if (pm.environment.get(\"statusCodeSetCsv\") != pm.response.code && pm.response.code == 400) {",
					"    pm.test(\"Response status code 400\", function () {",
					"        throw new Error(\"BAD REQUEST - Response status code of the request does not match with the expected status code\")",
					"    });",
					"}",
					"",
					"else if (pm.environment.get(\"statusCodeSetCsv\") != pm.response.code && pm.response.code == 401) {",
					"    pm.test(\"Response status code 401\", function () {",
					"        throw new Error(\"UNAUTHORIZED REQUEST - Response status code of the request does not match with the expected status code\")",
					"    });",
					"}",
					"",
					"else if (pm.environment.get(\"statusCodeSetCsv\") != pm.response.code && pm.response.code == 403) {",
					"    pm.test(\"Response status code 403\", function () {",
					"        throw new Error(\"FORBIDDEN REQUEST - Response status code of the request does not match with the expected status code\")",
					"    });",
					"}",
					"",
					"else if (pm.environment.get(\"statusCodeSetCsv\") != pm.response.code && pm.response.code == 404) {",
					"    pm.test(\"Response status code 404\", function () {",
					"        throw new Error(\"The response status code for the request is 404 - Response status code of the request does not match with the expected status code\")",
					"    });",
					"}",
					"",
					"else if (pm.environment.get(\"statusCodeSetCsv\") != pm.response.code && pm.response.code == 429) {",
					"    pm.test(\"Response status code 429\", function () {",
					"        throw new Error(\"The response status code for the request is 429 - Try running the requests with wait time (delay) between requests\")",
					"    });",
					"}",
					"",
					"else if ((pm.response.code) != (pm.environment.get(\"statusCodeSetCsv\"))) {",
					"    pm.test(\"Response Code \" + pm.response.code, function () {",
					"        throw new Error(\"Response status code of the request does not match with the expected status code \" + pm.environment.get(\"statusCodeSetCsv\") + \", verify the response code of the triggered request with the input CSV file\")",
					"    });",
					"}",
					"",
					"",
					"else {",
					"    pm.test(\"FAIL - The status code returned for the request triggered does not match with the expected status\", () => { throw new Error(\"- Please look into the value given under Expected Status Code column in the CSV\") });",
					"}"
				]
			}
		}
	]
}